/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package gradle.helper;

import io.micronaut.gradle.tapi.MicronautModelPlugin;
import io.micronaut.gradle.tapi.model.MicronautModel;
import org.gradle.tooling.GradleConnector;
import org.gradle.tooling.ModelBuilder;
import org.gradle.tooling.ProjectConnection;
import picocli.CommandLine;

import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;


@CommandLine.Command
public class App implements Runnable {

    @CommandLine.Option(
            names = {"-b", "--build-directory"},
            description = "Path to the build directory to analyze",
            required = true
    )
    File buildDir;

    public static void main(String[] args) {
        int exitCode = new CommandLine(new App()).execute(args);
        System.exit(exitCode);
    }

    @Override
    public void run() {
        try {
            Path initGradle = Files.createTempFile("init", ".gradle");
            URL pluginLocation = MicronautModelPlugin.class.getProtectionDomain().getCodeSource().getLocation();
            URL modelLocation = MicronautModel.class.getProtectionDomain().getCodeSource().getLocation();
            Files.write(initGradle, Arrays.asList(
                    "initscript {",
                        "   dependencies {",
                        "      classpath files(\"" + new File(pluginLocation.toURI()).getCanonicalPath() + "\")",
                        "      classpath files(\"" + new File(modelLocation.toURI()).getCanonicalPath() + "\")",
                        "   }",
                    "}",
                    "allprojects {",
                    "   apply plugin: " + MicronautModelPlugin.class.getName(),
                    "}"
            ), StandardCharsets.UTF_8);
            GradleConnector connector = GradleConnector.newConnector();
            connector.forProjectDirectory(buildDir);
            try (ProjectConnection connection = connector.connect()) {
                ModelBuilder<MicronautModel> modelBuilder = connection.model(MicronautModel.class);
                modelBuilder.withArguments("--init-script", initGradle.toString());
                modelBuilder.setStandardOutput(System.out);
                modelBuilder.setStandardError(System.err);
                MicronautModel model = modelBuilder.get();
                System.out.println("model = " + model);
            }
        } catch (IOException | URISyntaxException e) {
            e.printStackTrace();
        }
    }

}
